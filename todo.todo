☐ Convert all firestore interactions into calls to a server API
☐ Add docstrings to all API routes that list path of file that makes call to it


☐ Implement logic for handling dates and project value.
☐ When a project is deleted, all of its samples should be deleted

API routes:
    ✔ getAllProjects @done(25-01-20 20:50)
    ✔ getOneProject @done(25-01-21 18:06)
    ✔ updateProject @done(25-01-21 18:28)
    ✔ dataEntryProject @done(25-01-21 20:32)
    ✔ deleteProject @done(25-01-26 14:20)
    ✔ createProject @done(25-01-26 12:51)

    ✔ getSamples @done(25-01-26 14:58)
    ✔ updateSamples @done(25-01-26 14:58)

    ✔ getAllClients @done(25-01-26 12:57)
    ✔ getOneClient @done(25-01-26 13:04)
    ✔ updateClient @done(25-01-26 13:12)
    ✔ deleteClient @done(25-01-26 14:20)
    ✔ createClient @done(25-01-26 15:12)

    ✔ undeleteProject @done(25-01-27 20:08)
    ✔ undeleteClient @done(25-01-27 20:08)


Pages to create:
    ✔ Add client @done(25-01-13 11:07)
    ✔ Edit client @done(25-01-13 17:59)
    ✔ Edit project @done(25-01-13 19:57)
    ✔ Data entry (Analysis) @done(25-01-20 15:44)
    ☐ Deleted entities
        'path/deleted' - Page that lists both deleted entities in two scrollable lists
        Maybe have 'path/deleted/projects' and '/clients' that displays all deleted on one page (searchable?, sortable?)

    ☐ Price sheet (for admins)
        This should probably be implemented after analytes

    ☐ View client's project list (quick list [scrollable small list] should be on client info page, with a larger organized table available via link)

    ☐ ProjectDetailsPage should have list of samples and their results

    ☐ Project Report??

    ☐ Login page

    ☐ Navbar (Home, projects, clients, [logout])
        Beneath the page header

Styling: 
    ☐ Create layouts for forms and other common pages


Testing: 
    ☐ Create tests in Postman for API routes
        GET Projects
        POST Projects
        UPDATE Projects
        DELETE Projects
        UPDATE Samples on Project

        GET Clients
        POST Clients
        UPDATE Clients
        DELETE Clients
    ☐ Look into other ways of testing web pages

Typescript:
    ☐ Make sure each page has a Typescript interface, as needed

Auth:
    ☐ 
    Create different classes of user and give them priviledges based on this
        Analyst, Admin, Client??
Futurework:
    ✔ Should samples just be an array within the project doc? @done(25-01-26 14:58)
    ☐ Client should have an array of projectIds for that client
        Use updateDoc to only write the new array and not have to 

    ☐ Projects and clients should be searchable and sortable

    ☐ On Analytes:
    Samples should have a number of different analyses attached to them (TPH, RCRA, PCBs for soil for example)
    During the project creation process, user should be able to select analyses
    Page for selecting analyses should be linked to depending on the type of project 
    Analytes should be a property of a sample (this doesnt need to be crazy, just demonstrate functionality)
    Maybe compare these to state DOH EALs in some kind of report format
        